"""Add cascade delete to appointments

Revision ID: 88b42a001803
Revises: afd6983f19dc
Create Date: 2025-07-16 00:59:58.053768

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '88b42a001803'
down_revision = 'afd6983f19dc'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('appointments')
    op.drop_table('bath_types')
    op.drop_table('benefits')
    op.drop_table('users')
    with op.batch_alter_table('appointment', schema=None) as batch_op:
        batch_op.alter_column('date',
               existing_type=sa.VARCHAR(length=100),
               type_=sa.String(length=20),
               nullable=False)
        batch_op.alter_column('time',
               existing_type=sa.VARCHAR(length=100),
               type_=sa.String(length=20),
               nullable=False)
        batch_op.alter_column('reason',
               existing_type=sa.VARCHAR(length=250),
               type_=sa.Text(),
               nullable=False)
        batch_op.alter_column('bath_type',
               existing_type=sa.VARCHAR(length=100),
               nullable=False)
        batch_op.alter_column('price',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               type_=sa.Integer(),
               nullable=False)
        batch_op.alter_column('user_id',
               existing_type=sa.INTEGER(),
               nullable=False)
        batch_op.drop_constraint(batch_op.f('appointment_user_id_fkey'), type_='foreignkey')
        batch_op.create_foreign_key(None, 'user', ['user_id'], ['id'], ondelete='CASCADE')

    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.alter_column('password',
               existing_type=sa.VARCHAR(length=255),
               type_=sa.String(length=200),
               nullable=False)
        batch_op.drop_column('aadhar')
        batch_op.drop_column('dob')

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.add_column(sa.Column('dob', sa.VARCHAR(length=20), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('aadhar', sa.VARCHAR(length=20), autoincrement=False, nullable=True))
        batch_op.alter_column('password',
               existing_type=sa.String(length=200),
               type_=sa.VARCHAR(length=255),
               nullable=True)

    with op.batch_alter_table('appointment', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key(batch_op.f('appointment_user_id_fkey'), 'user', ['user_id'], ['id'])
        batch_op.alter_column('user_id',
               existing_type=sa.INTEGER(),
               nullable=True)
        batch_op.alter_column('price',
               existing_type=sa.Integer(),
               type_=sa.DOUBLE_PRECISION(precision=53),
               nullable=True)
        batch_op.alter_column('bath_type',
               existing_type=sa.VARCHAR(length=100),
               nullable=True)
        batch_op.alter_column('reason',
               existing_type=sa.Text(),
               type_=sa.VARCHAR(length=250),
               nullable=True)
        batch_op.alter_column('time',
               existing_type=sa.String(length=20),
               type_=sa.VARCHAR(length=100),
               nullable=True)
        batch_op.alter_column('date',
               existing_type=sa.String(length=20),
               type_=sa.VARCHAR(length=100),
               nullable=True)

    op.create_table('users',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('users_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('email', sa.VARCHAR(length=150), autoincrement=False, nullable=False),
    sa.Column('username', sa.VARCHAR(length=150), autoincrement=False, nullable=False),
    sa.Column('phone', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('aadhar', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('dob', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('password', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('is_admin', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='users_pkey'),
    sa.UniqueConstraint('email', name='users_email_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_table('benefits',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('title', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('benefits_pkey'))
    )
    op.create_table('bath_types',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('bath_types_pkey')),
    sa.UniqueConstraint('name', name=op.f('bath_types_name_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('appointments',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('date', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('time', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('reason', sa.VARCHAR(length=250), autoincrement=False, nullable=True),
    sa.Column('bath_type', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('appointments_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('appointments_pkey'))
    )
    # ### end Alembic commands ###
